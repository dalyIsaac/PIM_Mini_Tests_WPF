<Window x:Class="PIM_Mini_Tests_WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PIM_Mini_Tests_WPF"
        xmlns:controls="clr-namespace:PIM_Mini_Tests_WPF.Controls"
        xmlns:properties="clr-namespace:PIM_Mini_Tests_WPF.Properties"
        mc:Ignorable="d"
        Title="PIM Mini Tests">

    <Window.Resources>
        <ResourceDictionary>
            <local:StatusToStringConverter x:Key="statusToString" />
            <local:StatusToColorConverter x:Key="statusToColor" />

            <Style x:Key="TreeViewItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>


            <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="16"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                                <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="1,0,0,0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                <Setter Property="IsExpanded" Value="True" />
                <Setter Property="IsSelected" Value="{Binding IsInitiallySelected, Mode=OneTime}" />
                <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
                <Setter Property="controls:VirtualToggleButton.IsVirtualToggleButton" Value="True" />
                <Setter Property="controls:VirtualToggleButton.IsChecked" Value="{Binding IsChecked}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid MaxWidth="{Binding RelativeSource={RelativeSource AncestorType= {x:Type TreeView}, AncestorLevel=1}, Path=ActualWidth}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" VerticalAlignment="Top" Margin="0 6 0 0"/>
                                <Border x:Name="Bd" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <HierarchicalDataTemplate x:Key="CheckBoxItemTemplate" ItemsSource="{Binding Children, Mode=OneTime}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <CheckBox IsChecked="{Binding IsChecked}" VerticalAlignment="Center"/>
                    <StackPanel Orientation="Horizontal" Grid.Column="1">
                        <!-- These elements are bound to a HardwareTest object. -->
                        <Label Content="{Binding Name, Mode=OneTime}" VerticalAlignment="Center" />
                        <Label Content="{Binding TestStatus, Mode=TwoWay, Converter={StaticResource statusToString}}" VerticalAlignment="Center" FontWeight="Bold" Foreground="{Binding TestStatus, Mode=TwoWay, Converter={StaticResource statusToColor}}"/>
                    </StackPanel>
                    <Button Content="↓" Grid.Column="2" Width="20" HorizontalAlignment="Right" Margin="4" Background="White" Click="ErrorOutput_Click"/>
                    <TextBox Text="{Binding ErrorMessage}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Margin="4 0" HorizontalAlignment="Stretch" IsReadOnly="True" TextWrapping="Wrap" Visibility="{Binding OutputVisibility, Mode=TwoWay}"/>
                </Grid>
            </HierarchicalDataTemplate>

            <Style x:Key="Header" TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="16" />
                <Setter Property="FontWeight" Value="Bold" />
            </Style>
            <Style x:Key="SettingsLabel" TargetType="{x:Type Label}">
                <Setter Property="Width" Value="120" />
            </Style>
            <Style x:Key="SettingsTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="Width" Value="40" />
                <Setter Property="Height" Value="18" />
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="28"/>
            <RowDefinition />
            <RowDefinition Height="28"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="200"/>
        </Grid.ColumnDefinitions>
        <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0" Margin="4">
            <Button Click="SelectAll_Click" Content="Select All" Width="80"/>
            <Button Click="UnselectAll_Click" Content="Unselect All" Width="80" Margin="4 0 0 0"/>
        </StackPanel>
        <TreeView x:Name="tree" Grid.Column="0" ItemContainerStyle="{StaticResource TreeViewItemStyle}" ItemsSource="{Binding Mode=OneTime}" ItemTemplate="{StaticResource CheckBoxItemTemplate}" Grid.Row="1" HorizontalContentAlignment="Stretch"/>
        <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="2" Margin="4">
            <Button Content="Run tests" Width="80" HorizontalAlignment="Left" Click="RunTests_Click" Background="LightBlue"/>
            <TextBlock x:Name="ErrorOutput" Margin="4 0 0 0" Foreground="Red" FontWeight="Medium" VerticalAlignment="Center" Text="Error output goes here" />
            <!--<TextBlock Text="|" Margin="4 0 0 0"/>-->
            <TextBlock Margin="4 0 0 0"  VerticalAlignment="Center" Text="Log location:" />
            <TextBlock x:Name="LoggingLocation" Margin="4 0 0 0" Text="{Binding Source={x:Static properties:Settings.Default}, Path=loggingLocation}" VerticalAlignment="Center"/>
            <Button x:Name="ChangeLoggingLocation" Margin="6 0 0 0" Content="Change logging location" Padding="12 0" Click="ChangeLoggingLocation_Click"/>
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.RowSpan="3" Margin="4">
            <TextBlock Text="EEPROM" Style="{StaticResource Header}" />
            <StackPanel Orientation="Horizontal">
                <Label Content="Port number: " Style="{StaticResource SettingsLabel}"/>
                <TextBox Style="{StaticResource SettingsTextBox}" Text="{Binding Source={x:Static properties:Settings.Default}, Path=eepromPortNumber}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Page size: " Style="{StaticResource SettingsLabel}"/>
                <TextBox Style="{StaticResource SettingsTextBox}" Text="{Binding Source={x:Static properties:Settings.Default}, Path=eepromPageSize}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Slave address: " Style="{StaticResource SettingsLabel}"/>
                <TextBox Style="{StaticResource SettingsTextBox}" Text="{Binding Source={x:Static properties:Settings.Default}, Path=eepromSlaveAddress}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Bitrate: " Style="{StaticResource SettingsLabel}"/>
                <TextBox Style="{StaticResource SettingsTextBox}" Text="{Binding Source={x:Static properties:Settings.Default}, Path=eepromBitrate}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Number of pages: " Style="{StaticResource SettingsLabel}"/>
                <TextBox Style="{StaticResource SettingsTextBox}" Text="{Binding Source={x:Static properties:Settings.Default}, Path=eepromNumPages}"/>
            </StackPanel>

        </StackPanel>
    </Grid>

</Window>
